/*********************************************************************
*
* Software License Agreement (BSD License)
*
*  Copyright (c) 2017, (ROC) Advanced Robotics, Ltd.
*  All rights reserved.
*
*  Redistribution and use in source and binary forms, with or without
*  modification, are permitted provided that the following conditions
*  are met:
*
*   * Redistributions of source code must retain the above copyright
*     notice, this list of conditions and the following disclaimer.
*   * Redistributions in binary form must reproduce the above
*     copyright notice, this list of conditions and the following
*     disclaimer in the documentation and/or other materials provided
*     with the distribution.
*   * Neither the name of Advanced Robotics, Ltd. nor the names of its
*     contributors may be used to endorse or promote products derived
*     from this software without specific prior written permission.
*
*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
*  POSSIBILITY OF SUCH DAMAGE.
*
* Author: HaoChih, LIN
* Email: f44006076@gmail.com
*********************************************************************/

#include "ros/ros.h"
#include "sensor_msgs/PointCloud2.h"
#include <iostream>

// Register as nodelet
#include <nodelet/nodelet.h>
#include <pluginlib/class_list_macros.h>
PLUGINLIB_EXPORT_CLASS(PointCloudSetValid, nodelet::Nodelet);


class PointCloudSetValid : public nodelet::Nodelet
{
  public:
    PointCloudSetValid();

  private:
    ros::NodeHandle nh_;                          
    ros::Subscriber pcd_sub;			     
    ros::Publisher pcd_pub;                   
    
    void pcd_callback(const sensor_msgs::PointCloud2& pcd_origin);
};


PointCloudSetValid::PointCloudSetValid()
{
  pcd_sub = nh_.subscribe("/points_valid", 1, &PointCloudSetValid::pcd_callback, this);
  pcd_pub = nh_.advertise<sensor_msgs::LaserScan>("/points_valid",10, true);
}


void PointCloudSetValid::pcd_callback(const sensor_msgs::PointCloud2& pcd_origin)
{
  sensor_msgs::LaserScan scan_bound;
  
  // Publish the result
  scan_bound.ranges.resize(count);
  scan_bound.intensities.resize(count);
  scan_pub.publish(scan_bound);
}


//------------Main function-----------------
int main(int argc, char **argv)
{
  ros::init(argc, argv, "PointCloudSetValid");
  ROS_INFO("=== PointCloudSetValid Start ===");  
  PointCloudSetValid pointCloudSetValid;

  while( ros::ok() )
    ros::spin();

  return EXIT_SUCCESS;
}
